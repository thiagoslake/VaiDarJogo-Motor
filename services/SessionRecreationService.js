const moment = require('moment');
moment.locale('pt-br');

class SessionRecreationService {
    constructor(database) {
        this.db = database;
    }

    /**
     * Recria todas as sess√µes de um jogo baseado nos dados atuais
     */
    async recreateGameSessions(gameId) {
        try {
            console.log(`üîÑ Iniciando recria√ß√£o de sess√µes para o jogo ${gameId}...`);

            // Buscar dados atuais do jogo
            const game = await this.getGameData(gameId);
            if (!game) {
                throw new Error('Jogo n√£o encontrado');
            }

            // Remover todas as sess√µes existentes
            const removedCount = await this.removeAllGameSessions(gameId);
            console.log(`üóëÔ∏è Removidas ${removedCount} sess√µes existentes`);

            // Criar novas sess√µes baseadas nos dados atuais
            const newSessions = await this.createNewSessions(game);
            console.log(`‚úÖ Criadas ${newSessions.length} novas sess√µes`);

            // Validar as novas sess√µes
            const validationResult = await this.validateNewSessions(gameId, newSessions);

            return {
                game_id: gameId,
                removed_sessions: removedCount,
                created_sessions: newSessions.length,
                validation_result: validationResult,
                success: validationResult.is_valid,
                message: `Sess√µes recriadas com sucesso: ${removedCount} removidas, ${newSessions.length} criadas`
            };

        } catch (error) {
            console.error('‚ùå Erro na recria√ß√£o de sess√µes:', error);
            throw error;
        }
    }

    /**
     * Busca dados do jogo
     */
    async getGameData(gameId) {
        try {
            const { data, error } = await this.db.supabase
                .from('games')
                .select('*')
                .eq('id', gameId)
                .single();

            if (error) {
                throw new Error(`Erro ao buscar jogo: ${error.message}`);
            }

            return data;
        } catch (error) {
            console.error('Erro ao buscar dados do jogo:', error);
            throw error;
        }
    }

    /**
     * Remove todas as sess√µes de um jogo
     */
    async removeAllGameSessions(gameId) {
        try {
            // Primeiro, buscar o n√∫mero de sess√µes que ser√£o removidas
            const { data: sessions, error: countError } = await this.db.supabase
                .from('game_sessions')
                .select('id')
                .eq('game_id', gameId);

            if (countError) {
                throw new Error(`Erro ao contar sess√µes: ${countError.message}`);
            }

            const sessionCount = sessions ? sessions.length : 0;

            if (sessionCount === 0) {
                console.log('‚ÑπÔ∏è Nenhuma sess√£o encontrada para remover');
                return 0;
            }

            // Remover todas as sess√µes
            const { error } = await this.db.supabase
                .from('game_sessions')
                .delete()
                .eq('game_id', gameId);

            if (error) {
                throw new Error(`Erro ao remover sess√µes: ${error.message}`);
            }

            console.log(`üóëÔ∏è Removidas ${sessionCount} sess√µes do jogo ${gameId}`);
            return sessionCount;

        } catch (error) {
            console.error('Erro ao remover sess√µes:', error);
            throw error;
        }
    }

    /**
     * Cria novas sess√µes baseadas nos dados do jogo
     */
    async createNewSessions(game) {
        try {
            console.log(`üìÖ Criando novas sess√µes para jogo com frequ√™ncia: ${game.frequency}`);

            // Se for jogo avulso, criar apenas uma sess√£o
            if (game.frequency === 'Jogo Avulso' || !game.frequency) {
                return await this.createSingleSession(game);
            }

            // Para jogos com frequ√™ncia, criar m√∫ltiplas sess√µes
            return await this.createRecurringSessions(game);

        } catch (error) {
            console.error('Erro ao criar novas sess√µes:', error);
            throw error;
        }
    }

    /**
     * Cria uma sess√£o √∫nica (jogo avulso)
     */
    async createSingleSession(game) {
        try {
            const sessionData = {
                game_id: game.id,
                session_date: game.game_date || moment().format('YYYY-MM-DD'),
                start_time: game.start_time,
                end_time: game.end_time,
                status: 'scheduled'
            };

            const { data, error } = await this.db.supabase
                .from('game_sessions')
                .insert([sessionData])
                .select();

            if (error) {
                throw new Error(`Erro ao criar sess√£o avulsa: ${error.message}`);
            }

            console.log(`‚úÖ Sess√£o avulsa criada: ${data[0].id}`);
            return data;

        } catch (error) {
            console.error('Erro ao criar sess√£o avulsa:', error);
            throw error;
        }
    }

    /**
     * Cria sess√µes recorrentes baseadas na frequ√™ncia
     */
    async createRecurringSessions(game) {
        try {
            const startDate = new Date(game.game_date || moment().format('YYYY-MM-DD'));
            const dayOfWeek = this.getDayOfWeekNumber(game.day_of_week);
            let currentDate = new Date(startDate);
            
            // Ajustar para o pr√≥ximo dia da semana correto
            while (currentDate.getDay() !== dayOfWeek) {
                currentDate.setDate(currentDate.getDate() + 1);
            }
            
            const sessions = [];
            const maxSessions = this.getMaxSessionsForFrequency(game.frequency);
            
            // Criar sess√µes baseadas na frequ√™ncia
            for (let i = 0; i < maxSessions; i++) {
                const sessionDate = currentDate.toISOString().split('T')[0];
                
                sessions.push({
                    game_id: game.id,
                    session_date: sessionDate,
                    start_time: game.start_time,
                    end_time: game.end_time,
                    status: 'scheduled'
                });
                
                // Calcular pr√≥xima data baseada na frequ√™ncia
                this.calculateNextDate(currentDate, game.frequency);
            }
            
            // Inserir todas as sess√µes de uma vez
            const { data, error } = await this.db.supabase
                .from('game_sessions')
                .insert(sessions)
                .select();

            if (error) {
                throw new Error(`Erro ao criar sess√µes recorrentes: ${error.message}`);
            }

            console.log(`‚úÖ ${data.length} sess√µes recorrentes criadas para o jogo ${game.id}`);
            return data;
            
        } catch (error) {
            console.error('Erro ao criar sess√µes recorrentes:', error);
            throw error;
        }
    }

    /**
     * Retorna o n√∫mero m√°ximo de sess√µes baseado na frequ√™ncia
     */
    getMaxSessionsForFrequency(frequency) {
        switch (frequency) {
            case 'Di√°ria': return 30; // 1 m√™s
            case 'Semanal': return 52; // 1 ano
            case 'Mensal': return 12; // 1 ano
            case 'Anual': return 5; // 5 anos
            default: return 52; // Padr√£o: 1 ano
        }
    }

    /**
     * Calcula a pr√≥xima data baseada na frequ√™ncia
     */
    calculateNextDate(currentDate, frequency) {
        switch (frequency) {
            case 'Di√°ria':
                currentDate.setDate(currentDate.getDate() + 1);
                break;
            case 'Semanal':
                currentDate.setDate(currentDate.getDate() + 7);
                break;
            case 'Mensal':
                currentDate.setMonth(currentDate.getMonth() + 1);
                break;
            case 'Anual':
                currentDate.setFullYear(currentDate.getFullYear() + 1);
                break;
            default:
                currentDate.setDate(currentDate.getDate() + 7); // Padr√£o semanal
        }
    }

    /**
     * Converte dia da semana para n√∫mero
     */
    getDayOfWeekNumber(dayName) {
        const days = {
            'Domingo': 0,
            'Segunda': 1,
            'Ter√ßa': 2,
            'Quarta': 3,
            'Quinta': 4,
            'Sexta': 5,
            'S√°bado': 6
        };
        return days[dayName] !== undefined ? days[dayName] : -1;
    }

    /**
     * Valida as novas sess√µes criadas
     */
    async validateNewSessions(gameId, sessions) {
        try {
            console.log('üîç Validando novas sess√µes criadas...');

            const GameValidationService = require('./GameValidationService');
            const validationService = new GameValidationService(this.db);
            
            const validationResult = await validationService.validateGameAndSessions(gameId);
            
            console.log(`‚úÖ Valida√ß√£o conclu√≠da. V√°lido: ${validationResult.is_valid}`);
            return validationResult;

        } catch (error) {
            console.error('Erro na valida√ß√£o das novas sess√µes:', error);
            return {
                is_valid: false,
                errors: [`Erro na valida√ß√£o: ${error.message}`]
            };
        }
    }

    /**
     * Recria sess√µes para todos os jogos ativos
     */
    async recreateAllActiveGameSessions() {
        try {
            console.log('üîÑ Iniciando recria√ß√£o de sess√µes para todos os jogos ativos...');

            const { data: games, error } = await this.db.supabase
                .from('games')
                .select('id, organization_name, location')
                .eq('status', 'active');

            if (error) {
                throw new Error(`Erro ao buscar jogos ativos: ${error.message}`);
            }

            const results = [];
            let totalSuccess = 0;
            let totalErrors = 0;

            for (const game of games) {
                try {
                    const result = await this.recreateGameSessions(game.id);
                    results.push({
                        game_id: game.id,
                        game_name: game.organization_name,
                        success: true,
                        result: result
                    });
                    totalSuccess++;
                } catch (error) {
                    console.error(`Erro ao recriar sess√µes do jogo ${game.id}:`, error);
                    results.push({
                        game_id: game.id,
                        game_name: game.organization_name,
                        success: false,
                        error: error.message
                    });
                    totalErrors++;
                }
            }

            return {
                total_games: games.length,
                successful_recreations: totalSuccess,
                failed_recreations: totalErrors,
                results: results,
                recreation_date: moment().format('YYYY-MM-DD HH:mm:ss')
            };

        } catch (error) {
            console.error('‚ùå Erro na recria√ß√£o de todas as sess√µes:', error);
            throw error;
        }
    }

    /**
     * Gera relat√≥rio de recria√ß√£o de sess√µes
     */
    generateRecreationReport(recreationResult) {
        let report = `üîÑ *RELAT√ìRIO DE RECRIA√á√ÉO DE SESS√ïES*\n\n`;
        
        report += `üìÖ *Data da Recria√ß√£o:* ${recreationResult.recreation_date}\n`;
        report += `üéÆ *Total de Jogos:* ${recreationResult.total_games}\n`;
        report += `‚úÖ *Sucessos:* ${recreationResult.successful_recreations}\n`;
        report += `‚ùå *Falhas:* ${recreationResult.failed_recreations}\n\n`;

        if (recreationResult.results && recreationResult.results.length > 0) {
            report += `üìã *DETALHES POR JOGO:*\n\n`;
            
            recreationResult.results.forEach((result, index) => {
                const icon = result.success ? '‚úÖ' : '‚ùå';
                report += `${icon} *${result.game_name}*\n`;
                
                if (result.success) {
                    report += `   ‚Ä¢ Sess√µes removidas: ${result.result.removed_sessions}\n`;
                    report += `   ‚Ä¢ Sess√µes criadas: ${result.result.created_sessions}\n`;
                    report += `   ‚Ä¢ Valida√ß√£o: ${result.result.validation_result.is_valid ? 'V√°lida' : 'Inv√°lida'}\n`;
                } else {
                    report += `   ‚Ä¢ Erro: ${result.error}\n`;
                }
                
                report += `\n`;
            });
        }

        return report;
    }

    /**
     * Verifica se um jogo precisa ter suas sess√µes recriadas
     */
    async checkIfGameNeedsSessionRecreation(gameId) {
        try {
            console.log(`üîç Verificando se o jogo ${gameId} precisa de recria√ß√£o de sess√µes...`);

            const GameValidationService = require('./GameValidationService');
            const validationService = new GameValidationService(this.db);
            
            const validationResult = await validationService.validateGameAndSessions(gameId);
            
            const needsRecreation = !validationResult.is_valid || 
                                  validationResult.errors.length > 0 ||
                                  validationResult.session_validation.invalid_sessions > 0;

            return {
                game_id: gameId,
                needs_recreation: needsRecreation,
                validation_result: validationResult,
                reason: needsRecreation ? 'Sess√µes inv√°lidas ou erros encontrados' : 'Sess√µes v√°lidas'
            };

        } catch (error) {
            console.error('Erro ao verificar necessidade de recria√ß√£o:', error);
            return {
                game_id: gameId,
                needs_recreation: true,
                reason: `Erro na verifica√ß√£o: ${error.message}`
            };
        }
    }
}

module.exports = SessionRecreationService;
