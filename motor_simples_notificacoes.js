#!/usr/bin/env node

/**
 * üöÄ MOTOR SIMPLES - APENAS NOTIFICA√á√ïES
 * 
 * Este motor simplificado foca apenas em enviar notifica√ß√µes
 * individuais para mensalistas, sem as funcionalidades complexas.
 */

require('dotenv').config();
const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const { createClient } = require('@supabase/supabase-js');
const moment = require('moment');
moment.locale('pt-br');

class MotorSimplesNotificacoes {
    constructor() {
        // Configura√ß√£o do Puppeteer otimizada
        const puppeteerConfig = {
            headless: true,
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-gpu',
                '--disable-web-security',
                '--disable-features=VizDisplayCompositor',
                '--disable-background-timer-throttling',
                '--disable-backgrounding-occluded-windows',
                '--disable-renderer-backgrounding',
                '--disable-extensions',
                '--disable-plugins',
                '--disable-default-apps',
                '--disable-sync',
                '--disable-translate',
                '--hide-scrollbars',
                '--mute-audio',
                '--no-default-browser-check',
                '--no-pings',
                '--password-store=basic',
                '--use-mock-keychain'
            ]
        };

        this.client = new Client({
            authStrategy: new LocalAuth({
                clientId: "vaidarjogo-motor-fixo",
                dataPath: "./.wwebjs_auth"
            }),
            puppeteer: puppeteerConfig,
            restartOnAuthFail: true
        });

        // Configurar Supabase
        const supabaseUrl = 'https://ddlxamlaoumhbbrnmasj.supabase.co';
        const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRkbHhhbWxhb3VtaGJicm5tYXNqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5NDAwMzcsImV4cCI6MjA3MjUxNjAzN30.VrTmCTDl0zkzP1GQ8YHAqFLbtCUlaYIp7v_4rUHbSMo';

        this.supabase = createClient(supabaseUrl, supabaseAnonKey);
        this.isReady = false;
        this.notificationInterval = null;
    }

    async initialize() {
        try {
            console.log('üöÄ Iniciando Motor Simples de Notifica√ß√µes...\n');
            
            // Testar conex√£o com Supabase
            console.log('üîó Testando conex√£o com Supabase...');
            const { data, error } = await this.supabase
                .from('app_users')
                .select('count')
                .limit(1);
            
            if (error) {
                console.log('‚ö†Ô∏è Aviso: Erro na conex√£o com Supabase:', error.message);
            } else {
                console.log('‚úÖ Conectado ao Supabase com sucesso!');
            }
            
            // Configurar eventos do WhatsApp
            this.setupWhatsAppEvents();
            
            // Inicializar cliente WhatsApp
            await this.client.initialize();
            
        } catch (error) {
            console.error('‚ùå Erro ao inicializar motor:', error);
            throw error;
        }
    }

    setupWhatsAppEvents() {
        // QR Code
        this.client.on('qr', (qr) => {
            console.log('üì± QR Code gerado. Escaneie com o WhatsApp:');
            console.log('üíæ Sess√£o ser√° salva automaticamente ap√≥s o escaneamento');
            qrcode.generate(qr, { small: true });
        });

        // Sess√£o carregada (sem QR Code)
        this.client.on('authenticated', () => {
            console.log('üîê Sess√£o WhatsApp autenticada!');
            console.log('üíæ Usando sess√£o salva anteriormente');
        });

        // Cliente pronto
        this.client.on('ready', () => {
            console.log('‚úÖ WhatsApp conectado e pronto!');
            console.log('üíæ Sess√£o salva em: ./.wwebjs_auth/');
            console.log('üîÑ Pr√≥xima execu√ß√£o usar√° a sess√£o salva automaticamente');
            this.isReady = true;
            this.startNotificationScheduler();
        });

        // Erro de autentica√ß√£o
        this.client.on('auth_failure', (msg) => {
            console.error('‚ùå Falha na autentica√ß√£o:', msg);
        });

        // Cliente desconectado
        this.client.on('disconnected', (reason) => {
            console.log('üîå Cliente desconectado:', reason);
            this.isReady = false;
            this.stopNotificationScheduler();
        });
    }

    /**
     * Iniciar agendador de notifica√ß√µes
     */
    startNotificationScheduler() {
        console.log('‚è∞ Iniciando agendador de notifica√ß√µes...');
        
        this.notificationInterval = setInterval(async () => {
            if (this.isReady) {
                await this.checkAndSendNotifications();
            }
        }, 10000); // Verificar a cada 10 segundos
        
        console.log('‚úÖ Agendador iniciado (verifica√ß√£o a cada 10 segundos)');
    }

    /**
     * Parar agendador de notifica√ß√µes
     */
    stopNotificationScheduler() {
        if (this.notificationInterval) {
            clearInterval(this.notificationInterval);
            this.notificationInterval = null;
            console.log('‚èπÔ∏è Agendador de notifica√ß√µes parado');
        }
    }

    /**
     * Verificar e enviar notifica√ß√µes
     */
    async checkAndSendNotifications() {
        try {
            console.log('üîç Verificando notifica√ß√µes...');
            const now = moment();
            console.log('üïê Hora atual:', now.format('DD/MM/YYYY HH:mm:ss'));
            
            // Buscar sess√µes que precisam de notifica√ß√£o
            const { data: sessoes, error } = await this.supabase
                .from('game_sessions')
                .select(`
                    id,
                    game_id,
                    session_date,
                    start_time,
                    games!inner(
                        id,
                        organization_name,
                        location
                    ),
                    notification_configs!inner(
                        id,
                        notification_schedule,
                        is_active
                    )
                `)
                .eq('status', 'scheduled')
                .eq('notification_configs.is_active', true)
                .gte('session_date', now.format('YYYY-MM-DD'));
            
            if (error) {
                console.log('‚ö†Ô∏è Erro ao buscar sess√µes:', error.message);
                return;
            }
            
            if (!sessoes || sessoes.length === 0) {
                console.log('üìù Nenhuma sess√£o encontrada');
                return; // Nenhuma sess√£o encontrada
            }
            
            console.log(`üìä Sess√µes encontradas: ${sessoes.length}`);
            
            // Processar cada sess√£o
            for (const sessao of sessoes) {
                console.log(`\nüéÆ Processando sess√£o: ${sessao.games.organization_name}`);
                const sessionDateTime = moment(`${sessao.session_date} ${sessao.start_time}`, 'YYYY-MM-DD HH:mm:ss');
                const timeUntilSession = sessionDateTime.diff(now, 'hours', true);
                console.log(`üìÖ Data da sess√£o: ${sessionDateTime.format('DD/MM/YYYY HH:mm:ss')}`);
                console.log(`‚è∞ Tempo restante: ${timeUntilSession.toFixed(3)} horas`);
                
                // Verificar se precisa enviar notifica√ß√£o
                let configs = sessao.notification_configs || [];
                
                // Se n√£o √© array, converter para array
                if (!Array.isArray(configs)) {
                    console.log('‚ö†Ô∏è Configura√ß√µes n√£o s√£o array, convertendo...');
                    configs = [configs]; // Converter objeto √∫nico para array
                }
                
                console.log(`üîî Configura√ß√µes encontradas: ${configs.length}`);
                
                for (const config of configs) {
                    const shouldSend = this.shouldSendNotification(config, timeUntilSession);
                    console.log(`üîç Deve enviar notifica√ß√£o: ${shouldSend ? 'SIM' : 'N√ÉO'}`);
                    
                    if (shouldSend) {
                        console.log('üì§ Enviando notifica√ß√µes...');
                        await this.sendNotificationToMensalistas(sessao, config);
                    }
                }
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao verificar notifica√ß√µes:', error);
        }
    }

    /**
     * Verificar se deve enviar notifica√ß√£o
     */
    shouldSendNotification(config, timeUntilSession) {
        try {
            const { notification_schedule } = config;
            const schedule = Array.isArray(notification_schedule) ? 
                           notification_schedule : 
                           JSON.parse(notification_schedule);
            
            console.log(`üìã Schedule:`, JSON.stringify(schedule, null, 2));
            console.log(`‚è∞ Time until session: ${timeUntilSession.toFixed(3)} horas`);
            
            for (const item of schedule) {
                const { hours_before } = item;
                const timeDiff = Math.abs(timeUntilSession - hours_before);
                
                console.log(`üîç Item: ${hours_before}h antes, diff: ${timeDiff.toFixed(3)}h`);
                
                if (timeDiff <= 0.1) { // 6 minutos de toler√¢ncia
                    console.log(`‚úÖ Deve enviar! (diff <= 0.1h)`);
                    return true;
                }
            }
            
            console.log(`‚ùå N√£o deve enviar (nenhum item dentro da toler√¢ncia)`);
            return false;
            
        } catch (error) {
            console.log('‚ö†Ô∏è Erro ao processar notification_schedule:', error.message);
            return false;
        }
    }

    /**
     * Enviar notifica√ß√£o para mensalistas
     */
    async sendNotificationToMensalistas(sessao, config) {
        try {
            console.log(`\nüì± Enviando notifica√ß√£o para sess√£o: ${sessao.games.organization_name}`);
            
            // Buscar mensalistas do jogo
            const { data: mensalistas, error } = await this.supabase
                .from('game_players')
                .select(`
                    player_id,
                    players!inner(
                        id,
                        name,
                        phone_number,
                        type
                    )
                `)
                .eq('game_id', sessao.games.id)
                .eq('status', 'active')
                .eq('players.type', 'monthly')
                .eq('players.status', 'active');
            
            if (error) {
                console.log('‚ùå Erro ao buscar mensalistas:', error.message);
                return;
            }
            
            if (!mensalistas || mensalistas.length === 0) {
                console.log('üìù Nenhum mensalista encontrado para este jogo');
                return;
            }
            
            const sessionDateTime = moment(`${sessao.session_date} ${sessao.start_time}`, 'YYYY-MM-DD HH:mm:ss');
            const formattedDate = sessionDateTime.format('DD/MM/YYYY [√†s] HH:mm');
            
            // Enviar para cada mensalista
            for (const mensalista of mensalistas) {
                const success = await this.sendIndividualNotification(mensalista.players, sessao, formattedDate);
                if (success) {
                    // Log individual da notifica√ß√£o enviada
                    await this.logNotification(sessao, config, mensalista.players);
                }
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao enviar notifica√ß√µes:', error);
        }
    }

    /**
     * Enviar notifica√ß√£o individual
     */
    async sendIndividualNotification(player, sessao, formattedDate) {
        try {
            const phoneNumber = `55${player.phone_number}@c.us`;
            
            const message = `üèà *CONFIRMA√á√ÉO DE PRESEN√áA*\n\n` +
                          `Ol√° ${player.name}! üëã\n\n` +
                          `Voc√™ tem um jogo agendado:\n` +
                          `üéÆ *${sessao.games.organization_name}*\n` +
                          `üìç ${sessao.games.location}\n` +
                          `üìÖ ${formattedDate}\n\n` +
                          `Por favor, confirme sua presen√ßa respondendo:\n` +
                          `‚úÖ *SIM* - Estarei presente\n` +
                          `‚ùå *N√ÉO* - N√£o poderei comparecer\n\n` +
                          `Obrigado! üôè`;
            
            await this.client.sendMessage(phoneNumber, message);
            console.log(`‚úÖ Notifica√ß√£o enviada para: ${player.name} (${player.phone_number})`);
            return true; // Sucesso
            
        } catch (error) {
            console.error(`‚ùå Erro ao enviar para ${player.name}:`, error.message);
            return false; // Falha
        }
    }

    /**
     * Log da notifica√ß√£o enviada
     */
    async logNotification(sessao, config, player) {
        try {
            const { error } = await this.supabase
                .from('notifications')
                .insert({
                    game_id: sessao.game_id,
                    player_id: player.id,
                    type: 'individual_confirmation',
                    title: `Confirma√ß√£o de presen√ßa - ${sessao.games.organization_name}`,
                    message: `Notifica√ß√£o de confirma√ß√£o enviada para ${player.name} (${player.phone_number})`,
                    sent_at: new Date().toISOString(),
                    status: 'sent'
                });
            
            if (error) {
                console.log('‚ö†Ô∏è Erro ao registrar notifica√ß√£o:', error.message);
            } else {
                console.log(`üìù Notifica√ß√£o registrada no banco para ${player.name} (ID: ${player.id})`);
            }
            
        } catch (error) {
            console.log('‚ö†Ô∏è Erro ao registrar notifica√ß√£o:', error.message);
        }
    }
}

// Executar motor
async function main() {
    const motor = new MotorSimplesNotificacoes();
    
    try {
        await motor.initialize();
        
        // Manter o processo rodando
        process.on('SIGINT', async () => {
            console.log('\nüõë Parando motor...');
            motor.stopNotificationScheduler();
            await motor.client.destroy();
            process.exit(0);
        });
        
    } catch (error) {
        console.error('‚ùå Erro fatal:', error);
        process.exit(1);
    }
}

// Executar se este arquivo for chamado diretamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = MotorSimplesNotificacoes;
