#!/usr/bin/env node

/**
 * üì± TESTE WHATSAPP REAL
 * 
 * Este script testa o envio real de notifica√ß√µes via WhatsApp
 * usando o motor completo com conex√£o real.
 */

const { createClient } = require('@supabase/supabase-js');
const moment = require('moment');
moment.locale('pt-br');

class TesteWhatsAppReal {
    constructor() {
        // Configurar Supabase com as MESMAS configura√ß√µes do Flutter
        const supabaseUrl = 'https://ddlxamlaoumhbbrnmasj.supabase.co';
        const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRkbHhhbWxhb3VtaGJicm5tYXNqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5NDAwMzcsImV4cCI6MjA3MjUxNjAzN30.VrTmCTDl0zkzP1GQ8YHAqFLbtCUlaYIp7v_4rUHbSMo';

        this.supabase = createClient(supabaseUrl, supabaseAnonKey);
    }

    async executarTesteWhatsApp() {
        try {
            console.log('üì± ===== TESTE WHATSAPP REAL =====\n');
            
            // 1. Verificar se o motor est√° funcionando
            await this.verificarMotor();
            
            // 2. Criar sess√£o para teste WhatsApp
            const sessaoTeste = await this.criarSessaoTesteWhatsApp();
            
            if (!sessaoTeste) {
                console.log('‚ùå Erro ao criar sess√£o de teste');
                return;
            }
            
            // 3. Criar configura√ß√£o com ID de grupo real
            const configTeste = await this.criarConfiguracaoTesteWhatsApp(sessaoTeste);
            
            if (!configTeste) {
                console.log('‚ùå Erro ao criar configura√ß√£o de teste');
                return;
            }
            
            // 4. Instru√ß√µes para teste manual
            await this.instrucoesTesteManual(sessaoTeste, configTeste);
            
            // 5. Limpar dados de teste
            await this.limparDadosTesteWhatsApp(sessaoTeste, configTeste);
            
            console.log('\nüì± ===== TESTE WHATSAPP CONCLU√çDO =====\n');
            
        } catch (error) {
            console.error('‚ùå Erro durante o teste WhatsApp:', error);
        }
    }

    /**
     * 1. Verificar se o motor est√° funcionando
     */
    async verificarMotor() {
        try {
            console.log('üîç 1. VERIFICANDO MOTOR:');
            
            // Verificar se h√° configura√ß√µes ativas
            const { count, error } = await this.supabase
                .from('notification_configs')
                .select('*', { count: 'exact', head: true })
                .eq('is_active', true);
            
            if (error) {
                console.log('   ‚ùå Erro ao verificar configura√ß√µes:', error.message);
            } else {
                console.log(`   ‚úÖ Configura√ß√µes ativas: ${count}`);
            }
            
            // Verificar se h√° sess√µes agendadas
            const { count: sessoes, error: sessoesError } = await this.supabase
                .from('game_sessions')
                .select('*', { count: 'exact', head: true })
                .eq('status', 'scheduled')
                .gte('session_date', moment().format('YYYY-MM-DD'));
            
            if (sessoesError) {
                console.log('   ‚ùå Erro ao verificar sess√µes:', sessoesError.message);
            } else {
                console.log(`   ‚úÖ Sess√µes agendadas: ${sessoes}`);
            }
            
            console.log('   üìù Para testar WhatsApp real, execute:');
            console.log('   üìù node motor_com_stats.js');
            console.log('   üìù Aguarde o QR Code e escaneie com o WhatsApp');
            console.log('   üìù Adicione o bot a um grupo de teste');
            console.log('   üìù Configure o ID do grupo na configura√ß√£o');
            
        } catch (error) {
            console.error('   ‚ùå Erro ao verificar motor:', error);
        }
    }

    /**
     * 2. Criar sess√£o para teste WhatsApp
     */
    async criarSessaoTesteWhatsApp() {
        try {
            console.log('\nüîß 2. CRIANDO SESS√ÉO PARA TESTE WHATSAPP:');
            
            // Buscar um jogo existente
            const { data: jogos, error: jogoError } = await this.supabase
                .from('games')
                .select('id, organization_name')
                .limit(1);
            
            if (jogoError || !jogos || jogos.length === 0) {
                console.log('   ‚ùå Erro ao buscar jogo:', jogoError?.message);
                return null;
            }
            
            const jogo = jogos[0];
            const agora = moment();
            const dataSessao = agora.clone().add(10, 'minutes'); // 10 minutos no futuro
            
            const sessaoData = {
                game_id: jogo.id,
                session_date: dataSessao.format('YYYY-MM-DD'),
                start_time: dataSessao.format('HH:mm:ss'),
                end_time: dataSessao.clone().add(2, 'hours').format('HH:mm:ss'),
                status: 'scheduled',
                attendance_count: 0,
                notes: 'Sess√£o para teste WhatsApp real - ser√° removida ap√≥s o teste'
            };
            
            const { data: sessao, error } = await this.supabase
                .from('game_sessions')
                .insert(sessaoData)
                .select()
                .single();
            
            if (error) {
                console.log('   ‚ùå Erro ao criar sess√£o:', error.message);
                return null;
            }
            
            console.log(`   ‚úÖ Sess√£o criada: ${sessao.id}`);
            console.log(`   üìÖ Data: ${sessao.session_date} ${sessao.start_time}`);
            console.log(`   ‚è∞ Faltam: ${dataSessao.diff(agora, 'minutes', true).toFixed(1)} minutos`);
            
            return sessao;
            
        } catch (error) {
            console.error('   ‚ùå Erro ao criar sess√£o:', error);
            return null;
        }
    }

    /**
     * 3. Criar configura√ß√£o com ID de grupo real
     */
    async criarConfiguracaoTesteWhatsApp(sessao) {
        try {
            console.log('\nüîß 3. CRIANDO CONFIGURA√á√ÉO PARA TESTE WHATSAPP:');
            
            const configData = {
                session_id: sessao.id,
                game_id: sessao.game_id,
                total_notifications: 3,
                mensal_notifications: 2,
                notification_type: 'group',
                whatsapp_group_id: '120363123456789012@g.us', // ID de exemplo - SUBSTITUA pelo ID real do seu grupo
                notification_schedule: [
                    {
                        "number": 1,
                        "hours_before": 0.15, // 9 minutos antes
                        "target": "todos",
                        "message_type": "confirmation"
                    },
                    {
                        "number": 2,
                        "hours_before": 0.1, // 6 minutos antes
                        "target": "todos",
                        "message_type": "reminder"
                    },
                    {
                        "number": 3,
                        "hours_before": 0.05, // 3 minutos antes
                        "target": "todos",
                        "message_type": "final_confirmation"
                    }
                ],
                is_active: true
            };
            
            const { data: config, error } = await this.supabase
                .from('notification_configs')
                .insert(configData)
                .select()
                .single();
            
            if (error) {
                console.log('   ‚ùå Erro ao criar configura√ß√£o:', error.message);
                return null;
            }
            
            console.log(`   ‚úÖ Configura√ß√£o criada: ${config.id}`);
            console.log(`   üîî 3 notifica√ß√µes configuradas:`);
            console.log(`      1. 9 minutos antes (todos) - confirma√ß√£o`);
            console.log(`      2. 6 minutos antes (todos) - lembrete`);
            console.log(`      3. 3 minutos antes (todos) - confirma√ß√£o final`);
            console.log(`   üì± WhatsApp Group ID: ${config.whatsapp_group_id}`);
            
            return config;
            
        } catch (error) {
            console.error('   ‚ùå Erro ao criar configura√ß√£o:', error);
            return null;
        }
    }

    /**
     * 4. Instru√ß√µes para teste manual
     */
    async instrucoesTesteManual(sessao, config) {
        try {
            console.log('\nüìã 4. INSTRU√á√ïES PARA TESTE MANUAL:');
            
            console.log('   üöÄ PASSO 1: Iniciar o motor');
            console.log('   üìù Execute: node motor_com_stats.js');
            console.log('   üìù Aguarde o QR Code aparecer');
            console.log('   üìù Escaneie com o WhatsApp no seu celular');
            
            console.log('\n   üë• PASSO 2: Configurar grupo de teste');
            console.log('   üìù Crie um grupo no WhatsApp para teste');
            console.log('   üìù Adicione o bot ao grupo');
            console.log('   üìù O bot ir√° mapear os membros automaticamente');
            
            console.log('\n   üîß PASSO 3: Obter ID do grupo');
            console.log('   üìù Quando o bot for adicionado, ele mostrar√° o ID do grupo');
            console.log('   üìù Copie o ID do grupo (formato: 120363123456789012@g.us)');
            console.log('   üìù Atualize a configura√ß√£o no banco com o ID real');
            
            console.log('\n   ‚öôÔ∏è PASSO 4: Atualizar configura√ß√£o');
            console.log('   üìù Execute o script de atualiza√ß√£o com o ID real');
            console.log('   üìù Ou atualize manualmente no Supabase');
            
            console.log('\n   ‚è∞ PASSO 5: Aguardar notifica√ß√£o');
            console.log('   üìù O motor verificar√° a cada 10 segundos');
            console.log('   üìù Quando chegar o hor√°rio, enviar√° a notifica√ß√£o');
            console.log('   üìù Verifique se a mensagem chegou no grupo');
            
            console.log('\n   üìä PASSO 6: Verificar estat√≠sticas');
            console.log('   üìù Execute: node comando_stats.js');
            console.log('   üìù Verifique se a notifica√ß√£o foi registrada');
            
            // Mostrar dados da sess√£o criada
            console.log('\n   üìã DADOS DA SESS√ÉO CRIADA:');
            console.log(`   üéÆ Jogo: ${sessao.game_id}`);
            console.log(`   üìÖ Data: ${sessao.session_date} ${sessao.start_time}`);
            console.log(`   üîî Configura√ß√£o: ${config.id}`);
            console.log(`   üì± Group ID: ${config.whatsapp_group_id}`);
            
        } catch (error) {
            console.error('   ‚ùå Erro ao mostrar instru√ß√µes:', error);
        }
    }

    /**
     * 5. Limpar dados de teste
     */
    async limparDadosTesteWhatsApp(sessao, config) {
        try {
            console.log('\nüßπ 5. LIMPANDO DADOS DE TESTE:');
            
            // Remover configura√ß√£o
            const { error: configError } = await this.supabase
                .from('notification_configs')
                .delete()
                .eq('id', config.id);
            
            if (configError) {
                console.log('   ‚ùå Erro ao remover configura√ß√£o:', configError.message);
            } else {
                console.log('   ‚úÖ Configura√ß√£o removida');
            }
            
            // Remover sess√£o
            const { error: sessaoError } = await this.supabase
                .from('game_sessions')
                .delete()
                .eq('id', sessao.id);
            
            if (sessaoError) {
                console.log('   ‚ùå Erro ao remover sess√£o:', sessaoError.message);
            } else {
                console.log('   ‚úÖ Sess√£o removida');
            }
            
            console.log('   üìù Dados de teste removidos');
            console.log('   üìù Sistema limpo para uso normal');
            
        } catch (error) {
            console.error('   ‚ùå Erro ao limpar dados:', error);
        }
    }
}

// Executar teste WhatsApp
async function main() {
    const teste = new TesteWhatsAppReal();
    await teste.executarTesteWhatsApp();
}

// Executar se este arquivo for chamado diretamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = TesteWhatsAppReal;
