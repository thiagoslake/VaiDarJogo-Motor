#!/usr/bin/env node

/**
 * üîî NOTIFICA√á√ÉO REAL PARA TESTE
 * 
 * Este script cria uma sess√£o real e envia uma notifica√ß√£o real
 * para testar o sistema completo de notifica√ß√µes.
 */

const { createClient } = require('@supabase/supabase-js');
const moment = require('moment');
moment.locale('pt-br');

class NotificacaoRealTeste {
    constructor() {
        // Configurar Supabase com as MESMAS configura√ß√µes do Flutter
        const supabaseUrl = 'https://ddlxamlaoumhbbrnmasj.supabase.co';
        const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRkbHhhbWxhb3VtaGJicm5tYXNqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5NDAwMzcsImV4cCI6MjA3MjUxNjAzN30.VrTmCTDl0zkzP1GQ8YHAqFLbtCUlaYIp7v_4rUHbSMo';

        this.supabase = createClient(supabaseUrl, supabaseAnonKey);
    }

    async executarNotificacaoReal() {
        try {
            console.log('üîî ===== NOTIFICA√á√ÉO REAL PARA TESTE =====\n');
            
            // 1. Buscar um jogo existente
            const jogo = await this.buscarJogoExistente();
            
            if (!jogo) {
                console.log('‚ùå Nenhum jogo encontrado');
                return;
            }
            
            // 2. Criar sess√£o real para teste
            const sessaoReal = await this.criarSessaoReal(jogo);
            
            if (!sessaoReal) {
                console.log('‚ùå Erro ao criar sess√£o real');
                return;
            }
            
            // 3. Criar configura√ß√£o real
            const configReal = await this.criarConfiguracaoReal(sessaoReal);
            
            if (!configReal) {
                console.log('‚ùå Erro ao criar configura√ß√£o real');
                return;
            }
            
            // 4. Enviar notifica√ß√£o real
            await this.enviarNotificacaoReal(sessaoReal, configReal);
            
            // 5. Verificar resultado
            await this.verificarResultadoReal();
            
            // 6. Mostrar estat√≠sticas atualizadas
            await this.mostrarEstatisticasAtualizadas();
            
            console.log('\nüîî ===== NOTIFICA√á√ÉO REAL CONCLU√çDA =====\n');
            
        } catch (error) {
            console.error('‚ùå Erro durante a notifica√ß√£o real:', error);
        }
    }

    /**
     * 1. Buscar um jogo existente
     */
    async buscarJogoExistente() {
        try {
            console.log('üîç 1. BUSCANDO JOGO EXISTENTE:');
            
            const { data: jogos, error } = await this.supabase
                .from('games')
                .select('id, organization_name, location')
                .limit(1);
            
            if (error) {
                console.log('   ‚ùå Erro ao buscar jogos:', error.message);
                return null;
            }
            
            if (!jogos || jogos.length === 0) {
                console.log('   üìù Nenhum jogo encontrado');
                return null;
            }
            
            const jogo = jogos[0];
            console.log(`   ‚úÖ Jogo encontrado: ${jogo.organization_name}`);
            console.log(`   üìç Local: ${jogo.location}`);
            
            return jogo;
            
        } catch (error) {
            console.error('   ‚ùå Erro ao buscar jogo:', error);
            return null;
        }
    }

    /**
     * 2. Criar sess√£o real para teste
     */
    async criarSessaoReal(jogo) {
        try {
            console.log('\nüîß 2. CRIANDO SESS√ÉO REAL PARA TESTE:');
            
            const agora = moment();
            const dataSessao = agora.clone().add(5, 'minutes'); // 5 minutos no futuro
            
            const sessaoData = {
                game_id: jogo.id,
                session_date: dataSessao.format('YYYY-MM-DD'),
                start_time: dataSessao.format('HH:mm:ss'),
                end_time: dataSessao.clone().add(2, 'hours').format('HH:mm:ss'),
                status: 'scheduled',
                attendance_count: 0,
                notes: 'Sess√£o real para teste de notifica√ß√£o - ser√° removida ap√≥s o teste'
            };
            
            const { data: sessao, error } = await this.supabase
                .from('game_sessions')
                .insert(sessaoData)
                .select()
                .single();
            
            if (error) {
                console.log('   ‚ùå Erro ao criar sess√£o:', error.message);
                return null;
            }
            
            console.log(`   ‚úÖ Sess√£o real criada: ${sessao.id}`);
            console.log(`   üìÖ Data: ${sessao.session_date} ${sessao.start_time}`);
            console.log(`   ‚è∞ Faltam: ${dataSessao.diff(agora, 'minutes', true).toFixed(1)} minutos`);
            
            return sessao;
            
        } catch (error) {
            console.error('   ‚ùå Erro ao criar sess√£o real:', error);
            return null;
        }
    }

    /**
     * 3. Criar configura√ß√£o real
     */
    async criarConfiguracaoReal(sessao) {
        try {
            console.log('\nüîß 3. CRIANDO CONFIGURA√á√ÉO REAL:');
            
            const configData = {
                session_id: sessao.id,
                game_id: sessao.game_id,
                total_notifications: 3,
                mensal_notifications: 2,
                notification_type: 'group',
                whatsapp_group_id: 'teste-real@group.us', // ID de teste real
                notification_schedule: [
                    {
                        "number": 1,
                        "hours_before": 0.1, // 6 minutos antes (para testar agora)
                        "target": "todos",
                        "message_type": "confirmation"
                    },
                    {
                        "number": 2,
                        "hours_before": 0.05, // 3 minutos antes
                        "target": "todos",
                        "message_type": "reminder"
                    },
                    {
                        "number": 3,
                        "hours_before": 0.02, // 1.2 minutos antes
                        "target": "todos",
                        "message_type": "final_confirmation"
                    }
                ],
                is_active: true
            };
            
            const { data: config, error } = await this.supabase
                .from('notification_configs')
                .insert(configData)
                .select()
                .single();
            
            if (error) {
                console.log('   ‚ùå Erro ao criar configura√ß√£o:', error.message);
                return null;
            }
            
            console.log(`   ‚úÖ Configura√ß√£o real criada: ${config.id}`);
            console.log(`   üîî 3 notifica√ß√µes configuradas:`);
            console.log(`      1. 6 minutos antes (todos) - confirma√ß√£o`);
            console.log(`      2. 3 minutos antes (todos) - lembrete`);
            console.log(`      3. 1.2 minutos antes (todos) - confirma√ß√£o final`);
            
            return config;
            
        } catch (error) {
            console.error('   ‚ùå Erro ao criar configura√ß√£o real:', error);
            return null;
        }
    }

    /**
     * 4. Enviar notifica√ß√£o real
     */
    async enviarNotificacaoReal(sessao, config) {
        try {
            console.log('\nüì§ 4. ENVIANDO NOTIFICA√á√ÉO REAL:');
            
            const agora = moment();
            const dataSessao = moment(`${sessao.session_date} ${sessao.start_time}`, 'YYYY-MM-DD HH:mm:ss');
            const timeUntilSession = dataSessao.diff(agora, 'hours', true);
            
            console.log(`   ‚è≥ Tempo at√© a sess√£o: ${timeUntilSession.toFixed(3)} horas (${(timeUntilSession * 60).toFixed(1)} minutos)`);
            
            const schedule = Array.isArray(config.notification_schedule) ? 
                config.notification_schedule : 
                JSON.parse(config.notification_schedule);
            
            let notificacoesEnviadas = 0;
            
            for (const item of schedule) {
                const { hours_before, target, message_type } = item;
                const timeDiff = Math.abs(timeUntilSession - hours_before);
                
                console.log(`   üîî Verificando: ${hours_before}h antes (${target})`);
                console.log(`      Diferen√ßa: ${timeDiff.toFixed(3)} horas (${(timeDiff * 60).toFixed(1)} minutos)`);
                
                // Se est√° dentro de 30 minutos do hor√°rio programado
                if (timeDiff <= 0.5) {
                    console.log(`      ‚úÖ NOTIFICA√á√ÉO REAL ENVIADA!`);
                    
                    // Gerar mensagem real
                    const message = this.gerarMensagemReal(sessao, item);
                    console.log(`      üì± Mensagem real:`);
                    console.log(`      ${message}`);
                    
                    // Enviar para o banco
                    await this.enviarParaBancoReal(sessao, item);
                    notificacoesEnviadas++;
                } else {
                    console.log(`      ‚è≥ N√£o √© hora ainda (diferen√ßa: ${(timeDiff * 60).toFixed(1)} minutos)`);
                }
            }
            
            console.log(`\n   üìä Total de notifica√ß√µes reais enviadas: ${notificacoesEnviadas}`);
            
        } catch (error) {
            console.error('   ‚ùå Erro ao enviar notifica√ß√£o real:', error);
        }
    }

    /**
     * Gerar mensagem real
     */
    gerarMensagemReal(sessao, item) {
        const { hours_before, target, message_type } = item;
        const dataSessao = moment(`${sessao.session_date} ${sessao.start_time}`, 'YYYY-MM-DD HH:mm:ss');
        const formattedDate = dataSessao.format('DD/MM/YYYY [√†s] HH:mm');
        
        let message = `üèà *NOTIFICA√á√ÉO REAL - TESTE*\n\n`;
        message += `üìÖ Data: ${formattedDate}\n`;
        message += `üìç Local: Sess√£o Real de Teste\n`;
        message += `‚è∞ Faltam: ${(hours_before * 60).toFixed(0)} minutos\n\n`;
        
        if (message_type === 'confirmation') {
            message += `‚öΩ Confirme sua presen√ßa!`;
        } else if (message_type === 'reminder') {
            message += `‚è∞ Lembrete: Jogo em ${(hours_before * 60).toFixed(0)} minutos!`;
        } else if (message_type === 'final_confirmation') {
            message += `üî• √öltima chamada! Jogo em ${(hours_before * 60).toFixed(0)} minutos!`;
        }
        
        message += `\n\nüîî Esta √© uma notifica√ß√£o REAL do sistema de teste.`;
        message += `\nüì± Enviada em: ${moment().format('DD/MM/YYYY HH:mm:ss')}`;
        
        return message;
    }

    /**
     * Enviar para o banco real
     */
    async enviarParaBancoReal(sessao, item) {
        try {
            const { hours_before, target, message_type } = item;
            
            // Criar log de notifica√ß√£o real
            const { data, error } = await this.supabase
                .from('notifications')
                .insert({
                    game_id: sessao.game_id,
                    title: `[REAL] Lembrete: Sess√£o Real de Teste`,
                    message: `[REAL] Jogo agendado para ${moment(`${sessao.session_date} ${sessao.start_time}`, 'YYYY-MM-DD HH:mm:ss').format('DD/MM/YYYY [√†s] HH:mm')} - ${hours_before}h antes (${target})`,
                    type: 'game_reminder_real',
                    status: 'sent',
                    sent_at: new Date().toISOString()
                });

            if (error) {
                console.log(`      ‚ùå Erro ao salvar no banco: ${error.message}`);
            } else {
                console.log(`      ‚úÖ Notifica√ß√£o real salva no banco`);
            }
            
        } catch (error) {
            console.error(`      ‚ùå Erro ao enviar para banco real:`, error);
        }
    }

    /**
     * 5. Verificar resultado real
     */
    async verificarResultadoReal() {
        try {
            console.log('\n‚úÖ 5. VERIFICANDO RESULTADO REAL:');
            
            // Contar notifica√ß√µes reais
            const { count, error } = await this.supabase
                .from('notifications')
                .select('*', { count: 'exact', head: true })
                .eq('type', 'game_reminder_real');
            
            if (error) {
                console.log('   ‚ùå Erro ao contar notifica√ß√µes reais:', error.message);
            } else {
                console.log(`   üìä Total de notifica√ß√µes reais: ${count}`);
            }
            
            // Mostrar √∫ltimas notifica√ß√µes reais
            const { data: notifications, error: notifError } = await this.supabase
                .from('notifications')
                .select(`
                    id,
                    title,
                    message,
                    sent_at,
                    games!inner(
                        organization_name
                    )
                `)
                .eq('type', 'game_reminder_real')
                .order('sent_at', { ascending: false })
                .limit(3);
            
            if (notifError) {
                console.log('   ‚ùå Erro ao buscar notifica√ß√µes reais:', notifError.message);
            } else if (notifications && notifications.length > 0) {
                console.log(`   üìã √öltimas notifica√ß√µes reais:`);
                notifications.forEach((notification, index) => {
                    const sentTime = moment(notification.sent_at).format('DD/MM HH:mm:ss');
                    console.log(`   ${index + 1}. [${sentTime}] ${notification.games.organization_name} - ${notification.title}`);
                });
            } else {
                console.log('   üìù Nenhuma notifica√ß√£o real encontrada');
            }
            
        } catch (error) {
            console.error('   ‚ùå Erro ao verificar resultado real:', error);
        }
    }

    /**
     * 6. Mostrar estat√≠sticas atualizadas
     */
    async mostrarEstatisticasAtualizadas() {
        try {
            console.log('\nüìä 6. ESTAT√çSTICAS ATUALIZADAS:');
            
            // Contar todas as notifica√ß√µes
            const { count: totalNotif, error: totalError } = await this.supabase
                .from('notifications')
                .select('*', { count: 'exact', head: true });
            
            if (totalError) {
                console.log('   ‚ùå Erro ao contar notifica√ß√µes totais:', totalError.message);
            } else {
                console.log(`   üìä Total de notifica√ß√µes no sistema: ${totalNotif}`);
            }
            
            // Contar notifica√ß√µes da √∫ltima hora
            const umaHoraAtras = moment().subtract(1, 'hour').toISOString();
            const { count: ultimaHora, error: horaError } = await this.supabase
                .from('notifications')
                .select('*', { count: 'exact', head: true })
                .gte('sent_at', umaHoraAtras);
            
            if (horaError) {
                console.log('   ‚ùå Erro ao contar notifica√ß√µes da √∫ltima hora:', horaError.message);
            } else {
                console.log(`   üìä Notifica√ß√µes da √∫ltima hora: ${ultimaHora}`);
            }
            
            // Mostrar resumo por tipo
            const { data: tipos, error: tiposError } = await this.supabase
                .from('notifications')
                .select('type')
                .order('sent_at', { ascending: false })
                .limit(10);
            
            if (tiposError) {
                console.log('   ‚ùå Erro ao buscar tipos de notifica√ß√£o:', tiposError.message);
            } else if (tipos && tipos.length > 0) {
                console.log(`   üìã Tipos de notifica√ß√£o recentes:`);
                const tiposUnicos = [...new Set(tipos.map(n => n.type))];
                tiposUnicos.forEach((tipo, index) => {
                    const count = tipos.filter(n => n.type === tipo).length;
                    console.log(`   ${index + 1}. ${tipo}: ${count} notifica√ß√£o(√µes)`);
                });
            }
            
        } catch (error) {
            console.error('   ‚ùå Erro ao mostrar estat√≠sticas:', error);
        }
    }
}

// Executar notifica√ß√£o real
async function main() {
    const notificacao = new NotificacaoRealTeste();
    await notificacao.executarNotificacaoReal();
}

// Executar se este arquivo for chamado diretamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = NotificacaoRealTeste;
