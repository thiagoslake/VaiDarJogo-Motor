#!/usr/bin/env node

/**
 * üîç VERIFICAR NOTIFICA√á√ïES
 * 
 * Este script verifica se as notifica√ß√µes est√£o sendo salvas
 * corretamente com o player_id.
 */

const { createClient } = require('@supabase/supabase-js');
const moment = require('moment');
moment.locale('pt-br');

class VerificarNotificacoes {
    constructor() {
        // Configurar Supabase
        const supabaseUrl = 'https://ddlxamlaoumhbbrnmasj.supabase.co';
        const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRkbHhhbWxhb3VtaGJicm5tYXNqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5NDAwMzcsImV4cCI6MjA3MjUxNjAzN30.VrTmCTDl0zkzP1GQ8YHAqFLbtCUlaYIp7v_4rUHbSMo';

        this.supabase = createClient(supabaseUrl, supabaseAnonKey);
    }

    async verificarNotificacoes() {
        try {
            console.log('üîç ===== VERIFICANDO NOTIFICA√á√ïES =====\n');
            
            // 1. Verificar notifica√ß√µes recentes
            await this.verificarNotificacoesRecentes();
            
            // 2. Verificar notifica√ß√µes com player_id
            await this.verificarNotificacoesComPlayerId();
            
            // 3. Verificar notifica√ß√µes sem player_id
            await this.verificarNotificacoesSemPlayerId();
            
            console.log('\nüîç ===== VERIFICA√á√ÉO CONCLU√çDA =====\n');
            
        } catch (error) {
            console.error('‚ùå Erro durante a verifica√ß√£o:', error);
        }
    }

    /**
     * 1. Verificar notifica√ß√µes recentes
     */
    async verificarNotificacoesRecentes() {
        try {
            console.log('üìä 1. NOTIFICA√á√ïES RECENTES (√∫ltimas 2 horas):');
            
            const duasHorasAtras = moment().subtract(2, 'hours').toISOString();
            
            const { data: notificacoes, error } = await this.supabase
                .from('notifications')
                .select(`
                    id,
                    game_id,
                    player_id,
                    type,
                    title,
                    message,
                    status,
                    sent_at,
                    created_at,
                    players!inner(
                        id,
                        name,
                        phone_number
                    )
                `)
                .gte('created_at', duasHorasAtras)
                .order('created_at', { ascending: false });
            
            if (error) {
                console.log('   ‚ùå Erro ao buscar notifica√ß√µes:', error.message);
                return;
            }
            
            if (!notificacoes || notificacoes.length === 0) {
                console.log('   üìù Nenhuma notifica√ß√£o encontrada nas √∫ltimas 2 horas');
                return;
            }
            
            console.log(`   üìä Notifica√ß√µes encontradas: ${notificacoes.length}`);
            notificacoes.forEach((notif, index) => {
                const sentAt = notif.sent_at ? moment(notif.sent_at).format('DD/MM/YYYY HH:mm:ss') : 'N√£o enviada';
                console.log(`   ${index + 1}. ${notif.players.name} (${notif.players.phone_number})`);
                console.log(`      üÜî Player ID: ${notif.player_id}`);
                console.log(`      üéÆ Game ID: ${notif.game_id}`);
                console.log(`      üìù Tipo: ${notif.type}`);
                console.log(`      üìÖ Enviada: ${sentAt}`);
                console.log(`      üìÑ Mensagem: ${notif.message.substring(0, 50)}...`);
                console.log('');
            });
            
        } catch (error) {
            console.error('   ‚ùå Erro ao verificar notifica√ß√µes recentes:', error);
        }
    }

    /**
     * 2. Verificar notifica√ß√µes com player_id
     */
    async verificarNotificacoesComPlayerId() {
        try {
            console.log('\n‚úÖ 2. NOTIFICA√á√ïES COM PLAYER_ID:');
            
            const { data: notificacoes, error } = await this.supabase
                .from('notifications')
                .select(`
                    id,
                    player_id,
                    type,
                    title,
                    players!inner(
                        name,
                        phone_number
                    )
                `)
                .not('player_id', 'is', null)
                .order('created_at', { ascending: false })
                .limit(10);
            
            if (error) {
                console.log('   ‚ùå Erro ao buscar notifica√ß√µes com player_id:', error.message);
                return;
            }
            
            if (!notificacoes || notificacoes.length === 0) {
                console.log('   üìù Nenhuma notifica√ß√£o com player_id encontrada');
                return;
            }
            
            console.log(`   üìä Notifica√ß√µes com player_id: ${notificacoes.length}`);
            notificacoes.forEach((notif, index) => {
                console.log(`   ${index + 1}. ${notif.players.name} - ID: ${notif.player_id}`);
            });
            
        } catch (error) {
            console.error('   ‚ùå Erro ao verificar notifica√ß√µes com player_id:', error);
        }
    }

    /**
     * 3. Verificar notifica√ß√µes sem player_id
     */
    async verificarNotificacoesSemPlayerId() {
        try {
            console.log('\n‚ùå 3. NOTIFICA√á√ïES SEM PLAYER_ID:');
            
            const { data: notificacoes, error } = await this.supabase
                .from('notifications')
                .select(`
                    id,
                    player_id,
                    type,
                    title,
                    created_at
                `)
                .is('player_id', null)
                .order('created_at', { ascending: false })
                .limit(10);
            
            if (error) {
                console.log('   ‚ùå Erro ao buscar notifica√ß√µes sem player_id:', error.message);
                return;
            }
            
            if (!notificacoes || notificacoes.length === 0) {
                console.log('   ‚úÖ Nenhuma notifica√ß√£o sem player_id encontrada');
                return;
            }
            
            console.log(`   üìä Notifica√ß√µes sem player_id: ${notificacoes.length}`);
            notificacoes.forEach((notif, index) => {
                const createdAt = moment(notif.created_at).format('DD/MM/YYYY HH:mm:ss');
                console.log(`   ${index + 1}. ID: ${notif.id} - ${notif.type} - ${createdAt}`);
            });
            
        } catch (error) {
            console.error('   ‚ùå Erro ao verificar notifica√ß√µes sem player_id:', error);
        }
    }
}

// Executar verifica√ß√£o
async function main() {
    const verificador = new VerificarNotificacoes();
    await verificador.verificarNotificacoes();
}

// Executar se este arquivo for chamado diretamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = VerificarNotificacoes;

