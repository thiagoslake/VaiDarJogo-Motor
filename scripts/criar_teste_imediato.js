#!/usr/bin/env node

/**
 * üöÄ CRIAR TESTE IMEDIATO
 * 
 * Este script cria uma sess√£o de teste com hor√°rio muito pr√≥ximo
 * para testar o envio de notifica√ß√µes em tempo real.
 */

const { createClient } = require('@supabase/supabase-js');
const moment = require('moment');
moment.locale('pt-br');

class CriarTesteImediato {
    constructor() {
        // Configurar Supabase com as MESMAS configura√ß√µes do Flutter
        const supabaseUrl = 'https://ddlxamlaoumhbbrnmasj.supabase.co';
        const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRkbHhhbWxhb3VtaGJicm5tYXNqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5NDAwMzcsImV4cCI6MjA3MjUxNjAzN30.VrTmCTDl0zkzP1GQ8YHAqFLbtCUlaYIp7v_4rUHbSMo';

        this.supabase = createClient(supabaseUrl, supabaseAnonKey);
    }

    async criarTesteImediato() {
        try {
            console.log('üöÄ ===== CRIANDO TESTE IMEDIATO =====\n');
            
            // 1. Limpar sess√µes antigas
            await this.limparSessoesAntigas();
            
            // 2. Criar sess√£o com hor√°rio muito pr√≥ximo
            const sessaoTeste = await this.criarSessaoImediata();
            
            if (!sessaoTeste) {
                console.log('‚ùå Erro ao criar sess√£o de teste');
                return;
            }
            
            // 3. Criar configura√ß√£o com notifica√ß√µes imediatas
            const configTeste = await this.criarConfiguracaoImediata(sessaoTeste);
            
            if (!configTeste) {
                console.log('‚ùå Erro ao criar configura√ß√£o de teste');
                return;
            }
            
            // 4. Mostrar instru√ß√µes
            await this.mostrarInstrucoes(sessaoTeste, configTeste);
            
            console.log('\nüöÄ ===== TESTE IMEDIATO CRIADO =====\n');
            
        } catch (error) {
            console.error('‚ùå Erro durante a cria√ß√£o do teste:', error);
        }
    }

    /**
     * 1. Limpar sess√µes antigas
     */
    async limparSessoesAntigas() {
        try {
            console.log('üßπ 1. LIMPANDO SESS√ïES ANTIGAS:');
            
            // Remover configura√ß√µes de sess√µes antigas
            const { error: configError } = await this.supabase
                .from('notification_configs')
                .delete()
                .ilike('session_id', '%');
            
            if (configError) {
                console.log('   ‚ö†Ô∏è Erro ao remover configura√ß√µes antigas:', configError.message);
            } else {
                console.log('   ‚úÖ Configura√ß√µes antigas removidas');
            }
            
            // Remover confirma√ß√µes antigas
            const { error: confirmError } = await this.supabase
                .from('participation_confirmations')
                .delete()
                .ilike('session_id', '%');
            
            if (confirmError) {
                console.log('   ‚ö†Ô∏è Erro ao remover confirma√ß√µes antigas:', confirmError.message);
            } else {
                console.log('   ‚úÖ Confirma√ß√µes antigas removidas');
            }
            
            // Remover sess√µes antigas
            const { error: sessoesError } = await this.supabase
                .from('game_sessions')
                .delete()
                .ilike('notes', '%teste%');
            
            if (sessoesError) {
                console.log('   ‚ö†Ô∏è Erro ao remover sess√µes antigas:', sessoesError.message);
            } else {
                console.log('   ‚úÖ Sess√µes antigas removidas');
            }
            
        } catch (error) {
            console.error('   ‚ùå Erro ao limpar sess√µes antigas:', error);
        }
    }

    /**
     * 2. Criar sess√£o com hor√°rio muito pr√≥ximo
     */
    async criarSessaoImediata() {
        try {
            console.log('\nüîß 2. CRIANDO SESS√ÉO IMEDIATA:');
            
            // Buscar um jogo existente
            const { data: jogos, error: jogoError } = await this.supabase
                .from('games')
                .select('id, organization_name')
                .limit(1);
            
            if (jogoError || !jogos || jogos.length === 0) {
                console.log('   ‚ùå Erro ao buscar jogo:', jogoError?.message);
                return null;
            }
            
            const jogo = jogos[0];
            const agora = moment();
            
            // Criar sess√£o para 2 minutos no futuro
            const dataSessao = agora.clone().add(2, 'minutes');
            
            const sessaoData = {
                game_id: jogo.id,
                session_date: dataSessao.format('YYYY-MM-DD'),
                start_time: dataSessao.format('HH:mm:ss'),
                end_time: dataSessao.clone().add(2, 'hours').format('HH:mm:ss'),
                status: 'scheduled',
                attendance_count: 0,
                notes: 'TESTE IMEDIATO - Notifica√ß√µes em tempo real'
            };
            
            const { data: sessao, error } = await this.supabase
                .from('game_sessions')
                .insert(sessaoData)
                .select()
                .single();
            
            if (error) {
                console.log('   ‚ùå Erro ao criar sess√£o:', error.message);
                return null;
            }
            
            console.log(`   ‚úÖ Sess√£o criada: ${sessao.id}`);
            console.log(`   üìÖ Data: ${sessao.session_date} ${sessao.start_time}`);
            console.log(`   ‚è∞ Faltam: ${dataSessao.diff(agora, 'minutes', true).toFixed(1)} minutos`);
            console.log(`   üéÆ Jogo: ${jogo.organization_name}`);
            
            return sessao;
            
        } catch (error) {
            console.error('   ‚ùå Erro ao criar sess√£o:', error);
            return null;
        }
    }

    /**
     * 3. Criar configura√ß√£o com notifica√ß√µes imediatas
     */
    async criarConfiguracaoImediata(sessao) {
        try {
            console.log('\nüîß 3. CRIANDO CONFIGURA√á√ÉO IMEDIATA:');
            
            const configData = {
                session_id: sessao.id,
                game_id: sessao.game_id,
                total_notifications: 3,
                mensal_notifications: 2,
                notification_type: 'individual',
                whatsapp_group_id: '120363123456789012@g.us',
                notification_schedule: [
                    {
                        "number": 1,
                        "hours_before": 0.03, // 1.8 minutos antes
                        "target": "mensalistas",
                        "message_type": "confirmation"
                    },
                    {
                        "number": 2,
                        "hours_before": 0.02, // 1.2 minutos antes
                        "target": "mensalistas",
                        "message_type": "reminder"
                    },
                    {
                        "number": 3,
                        "hours_before": 0.01, // 0.6 minutos antes
                        "target": "mensalistas",
                        "message_type": "final_confirmation"
                    }
                ],
                is_active: true
            };
            
            const { data: config, error } = await this.supabase
                .from('notification_configs')
                .insert(configData)
                .select()
                .single();
            
            if (error) {
                console.log('   ‚ùå Erro ao criar configura√ß√£o:', error.message);
                return null;
            }
            
            console.log(`   ‚úÖ Configura√ß√£o criada: ${config.id}`);
            console.log(`   üîî 3 notifica√ß√µes configuradas:`);
            console.log(`      1. 1.8 minutos antes (mensalistas) - confirma√ß√£o`);
            console.log(`      2. 1.2 minutos antes (mensalistas) - lembrete`);
            console.log(`      3. 0.6 minutos antes (mensalistas) - confirma√ß√£o final`);
            console.log(`   üì± Grupo WhatsApp: ${config.whatsapp_group_id}`);
            
            return config;
            
        } catch (error) {
            console.error('   ‚ùå Erro ao criar configura√ß√£o:', error);
            return null;
        }
    }

    /**
     * 4. Mostrar instru√ß√µes
     */
    async mostrarInstrucoes(sessao, config) {
        try {
            console.log('\nüìã 4. INSTRU√á√ïES PARA O TESTE IMEDIATO:');
            
            console.log('   üöÄ PASSO 1: Verificar se o motor est√° rodando');
            console.log('   üìù O motor deve estar rodando em background');
            console.log('   üìù Se n√£o estiver, execute: node motor_completo_respostas.js');
            
            console.log('\n   ‚è∞ PASSO 2: Aguardar notifica√ß√µes (2 minutos)');
            console.log('   üìù As notifica√ß√µes ser√£o enviadas em:');
            console.log('      - 1.8 minutos antes (em ~20 segundos)');
            console.log('      - 1.2 minutos antes (em ~40 segundos)');
            console.log('      - 0.6 minutos antes (em ~80 segundos)');
            
            console.log('\n   üì± PASSO 3: Verificar mensagens no WhatsApp');
            console.log('   üìù Verifique se as mensagens chegaram nos telefones:');
            console.log('      - Thiago Nogueira (13981645787)');
            console.log('      - Joao Silva (13987544557)');
            
            console.log('\n   üìä DADOS DO TESTE IMEDIATO:');
            console.log(`   üéÆ Jogo: ${sessao.game_id}`);
            console.log(`   üìÖ Sess√£o: ${sessao.session_date} ${sessao.start_time}`);
            console.log(`   üîî Configura√ß√£o: ${config.id}`);
            console.log(`   üì± Grupo: ${config.whatsapp_group_id}`);
            
            console.log('\n   ‚ö†Ô∏è IMPORTANTE:');
            console.log('   üìù Este √© um TESTE IMEDIATO - as notifica√ß√µes ser√£o enviadas em segundos');
            console.log('   üìù Certifique-se de que o WhatsApp est√° conectado');
            console.log('   üìù Os mensalistas receber√£o mensagens reais');
            console.log('   üìù Monitore o console do motor para ver os logs');
            
        } catch (error) {
            console.error('   ‚ùå Erro ao mostrar instru√ß√µes:', error);
        }
    }
}

// Executar cria√ß√£o do teste imediato
async function main() {
    const teste = new CriarTesteImediato();
    await teste.criarTesteImediato();
}

// Executar se este arquivo for chamado diretamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = CriarTesteImediato;
