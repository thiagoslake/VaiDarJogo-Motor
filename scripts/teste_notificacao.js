#!/usr/bin/env node

/**
 * üß™ TESTE DE NOTIFICA√á√ÉO
 * 
 * Este script simula uma notifica√ß√£o teste, considerando que
 * a pr√≥xima sess√£o do jogo seria agora.
 */

const { createClient } = require('@supabase/supabase-js');
const moment = require('moment');
moment.locale('pt-br');

class TesteNotificacao {
    constructor() {
        // Configurar Supabase com as MESMAS configura√ß√µes do Flutter
        const supabaseUrl = 'https://ddlxamlaoumhbbrnmasj.supabase.co';
        const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRkbHhhbWxhb3VtaGJicm5tYXNqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5NDAwMzcsImV4cCI6MjA3MjUxNjAzN30.VrTmCTDl0zkzP1GQ8YHAqFLbtCUlaYIp7v_4rUHbSMo';

        this.supabase = createClient(supabaseUrl, supabaseAnonKey);
    }

    async executarTeste() {
        try {
            console.log('üß™ ===== TESTE DE NOTIFICA√á√ÉO =====\n');
            
            // 1. Buscar a pr√≥xima sess√£o
            const proximaSessao = await this.buscarProximaSessao();
            
            if (!proximaSessao) {
                console.log('‚ùå Nenhuma sess√£o encontrada para teste');
                return;
            }
            
            // 2. Simular que a sess√£o √© agora
            await this.simularSessaoAgora(proximaSessao);
            
            // 3. Testar l√≥gica de notifica√ß√£o
            await this.testarLogicaNotificacao(proximaSessao);
            
            // 4. Simular envio de notifica√ß√£o
            await this.simularEnvioNotificacao(proximaSessao);
            
            // 5. Verificar resultado
            await this.verificarResultado();
            
            console.log('\nüß™ ===== TESTE CONCLU√çDO =====\n');
            
        } catch (error) {
            console.error('‚ùå Erro durante o teste:', error);
        }
    }

    /**
     * 1. Buscar a pr√≥xima sess√£o
     */
    async buscarProximaSessao() {
        try {
            console.log('üîç 1. BUSCANDO PR√ìXIMA SESS√ÉO:');
            
            const now = moment();
            
            const { data: sessions, error } = await this.supabase
                .from('game_sessions')
                .select(`
                    id,
                    session_date,
                    start_time,
                    status,
                    games!inner(
                        id,
                        organization_name,
                        location
                    ),
                    notification_configs!inner(
                        id,
                        notification_schedule,
                        is_active
                    )
                `)
                .eq('status', 'scheduled')
                .eq('notification_configs.is_active', true)
                .gte('session_date', now.format('YYYY-MM-DD'))
                .order('session_date', { ascending: true })
                .order('start_time', { ascending: true })
                .limit(1);
            
            if (error) {
                console.log('   ‚ùå Erro ao buscar sess√µes:', error.message);
                return null;
            }
            
            if (!sessions || sessions.length === 0) {
                console.log('   üìù Nenhuma sess√£o encontrada');
                return null;
            }
            
            const sessao = sessions[0];
            console.log(`   ‚úÖ Sess√£o encontrada: ${sessao.games.organization_name}`);
            console.log(`   üìÖ Data: ${sessao.session_date} ${sessao.start_time}`);
            console.log(`   üìç Local: ${sessao.games.location}`);
            
            return sessao;
            
        } catch (error) {
            console.error('   ‚ùå Erro ao buscar pr√≥xima sess√£o:', error);
            return null;
        }
    }

    /**
     * 2. Simular que a sess√£o √© agora
     */
    async simularSessaoAgora(sessao) {
        try {
            console.log('\n‚è∞ 2. SIMULANDO SESS√ÉO AGORA:');
            
            const agora = moment();
            const dataOriginal = moment(`${sessao.session_date} ${sessao.start_time}`, 'YYYY-MM-DD HH:mm:ss');
            
            console.log(`   üìÖ Data original: ${dataOriginal.format('DD/MM/YYYY HH:mm')}`);
            console.log(`   ‚è∞ Agora: ${agora.format('DD/MM/YYYY HH:mm')}`);
            console.log(`   ‚è≥ Diferen√ßa: ${dataOriginal.diff(agora, 'hours', true).toFixed(1)} horas`);
            
            // Calcular quando as notifica√ß√µes deveriam ser enviadas
            const configs = sessao.notification_configs || [];
            if (Array.isArray(configs)) {
                for (const config of configs) {
                    try {
                        const schedule = Array.isArray(config.notification_schedule) ? 
                            config.notification_schedule : 
                            JSON.parse(config.notification_schedule);
                        
                        console.log(`   üîî Configura√ß√£o (${config.id}):`);
                        
                        for (const item of schedule) {
                            const { hours_before, target, message_type } = item;
                            const notificationTime = dataOriginal.clone().subtract(hours_before, 'hours');
                            const timeUntilNotification = notificationTime.diff(agora, 'hours', true);
                            
                            const status = timeUntilNotification > 0 ? '‚è≥ Pendente' : 
                                         timeUntilNotification > -1 ? 'üîî Agora!' : '‚úÖ Passou';
                            
                            console.log(`      ${status} ${hours_before}h antes (${target}) - ${notificationTime.format('DD/MM HH:mm')}`);
                        }
                    } catch (error) {
                        console.log(`      ‚ùå Erro ao processar configura√ß√£o: ${error.message}`);
                    }
                }
            }
            
        } catch (error) {
            console.error('   ‚ùå Erro ao simular sess√£o:', error);
        }
    }

    /**
     * 3. Testar l√≥gica de notifica√ß√£o
     */
    async testarLogicaNotificacao(sessao) {
        try {
            console.log('\nüîç 3. TESTANDO L√ìGICA DE NOTIFICA√á√ÉO:');
            
            const agora = moment();
            const dataOriginal = moment(`${sessao.session_date} ${sessao.start_time}`, 'YYYY-MM-DD HH:mm:ss');
            const timeUntilSession = dataOriginal.diff(agora, 'hours', true);
            
            console.log(`   ‚è≥ Tempo at√© a sess√£o: ${timeUntilSession.toFixed(1)} horas`);
            
            const configs = sessao.notification_configs || [];
            if (Array.isArray(configs)) {
                for (const config of configs) {
                    try {
                        const schedule = Array.isArray(config.notification_schedule) ? 
                            config.notification_schedule : 
                            JSON.parse(config.notification_schedule);
                        
                        console.log(`   üîî Testando configura√ß√£o (${config.id}):`);
                        
                        for (const item of schedule) {
                            const { hours_before, target, message_type } = item;
                            const timeDiff = Math.abs(timeUntilSession - hours_before);
                            
                            // Se est√° dentro de 30 minutos do hor√°rio programado
                            if (timeDiff <= 0.5) {
                                console.log(`      üîî NOTIFICA√á√ÉO DEVERIA SER ENVIADA!`);
                                console.log(`         ${hours_before}h antes, target: ${target}, tipo: ${message_type}`);
                                console.log(`         Diferen√ßa: ${timeDiff.toFixed(2)} horas (‚â§ 0.5h)`);
                            } else {
                                console.log(`      ‚è≥ N√£o √© hora ainda (diferen√ßa: ${timeDiff.toFixed(2)}h)`);
                            }
                        }
                    } catch (error) {
                        console.log(`      ‚ùå Erro ao processar configura√ß√£o: ${error.message}`);
                    }
                }
            }
            
        } catch (error) {
            console.error('   ‚ùå Erro ao testar l√≥gica:', error);
        }
    }

    /**
     * 4. Simular envio de notifica√ß√£o
     */
    async simularEnvioNotificacao(sessao) {
        try {
            console.log('\nüì§ 4. SIMULANDO ENVIO DE NOTIFICA√á√ÉO:');
            
            const agora = moment();
            const dataOriginal = moment(`${sessao.session_date} ${sessao.start_time}`, 'YYYY-MM-DD HH:mm:ss');
            const timeUntilSession = dataOriginal.diff(agora, 'hours', true);
            
            const configs = sessao.notification_configs || [];
            if (Array.isArray(configs)) {
                for (const config of configs) {
                    try {
                        const schedule = Array.isArray(config.notification_schedule) ? 
                            config.notification_schedule : 
                            JSON.parse(config.notification_schedule);
                        
                        for (const item of schedule) {
                            const { hours_before, target, message_type } = item;
                            const timeDiff = Math.abs(timeUntilSession - hours_before);
                            
                            // Se est√° dentro de 30 minutos do hor√°rio programado
                            if (timeDiff <= 0.5) {
                                console.log(`   üîî Enviando notifica√ß√£o teste:`);
                                console.log(`      Jogo: ${sessao.games.organization_name}`);
                                console.log(`      Data: ${dataOriginal.format('DD/MM/YYYY [√†s] HH:mm')}`);
                                console.log(`      Local: ${sessao.games.location}`);
                                console.log(`      Target: ${target}`);
                                console.log(`      Tipo: ${message_type}`);
                                console.log(`      Hor√°rio: ${hours_before}h antes do jogo`);
                                
                                // Simular mensagem
                                const message = this.gerarMensagemTeste(sessao, item);
                                console.log(`      üì± Mensagem:`);
                                console.log(`      ${message}`);
                                
                                // Simular envio para o banco
                                await this.simularEnvioParaBanco(sessao, item);
                            }
                        }
                    } catch (error) {
                        console.log(`   ‚ùå Erro ao processar configura√ß√£o: ${error.message}`);
                    }
                }
            }
            
        } catch (error) {
            console.error('   ‚ùå Erro ao simular envio:', error);
        }
    }

    /**
     * Gerar mensagem de teste
     */
    gerarMensagemTeste(sessao, item) {
        const { hours_before, target, message_type } = item;
        const dataOriginal = moment(`${sessao.session_date} ${sessao.start_time}`, 'YYYY-MM-DD HH:mm:ss');
        const formattedDate = dataOriginal.format('DD/MM/YYYY [√†s] HH:mm');
        
        let message = `üèà *${sessao.games.organization_name}*\n\n`;
        message += `üìÖ Data: ${formattedDate}\n`;
        message += `üè¢ Organiza√ß√£o: ${sessao.games.organization_name}\n`;
        message += `üìç Local: ${sessao.games.location}\n\n`;
        
        if (message_type === 'confirmation') {
            message += `‚öΩ Confirme sua presen√ßa!`;
        } else if (message_type === 'reminder') {
            message += `‚è∞ Lembrete: Jogo em ${hours_before}h!`;
        } else if (message_type === 'final_confirmation') {
            message += `üî• √öltima chamada! Jogo em ${hours_before}h!`;
        }
        
        if (target === 'mensalistas') {
            message += `\n\nüë• Mensalistas: Confirma√ß√£o obrigat√≥ria!`;
        } else if (target === 'todos') {
            message += `\n\nüë• Todos os jogadores: Confirme sua presen√ßa!`;
        }
        
        return message;
    }

    /**
     * Simular envio para o banco
     */
    async simularEnvioParaBanco(sessao, item) {
        try {
            const { hours_before, target, message_type } = item;
            
            // Criar log de notifica√ß√£o teste
            const { data, error } = await this.supabase
                .from('notifications')
                .insert({
                    game_id: sessao.games.id,
                    title: `[TESTE] Lembrete: ${sessao.games.organization_name}`,
                    message: `[TESTE] Jogo agendado para ${moment(`${sessao.session_date} ${sessao.start_time}`, 'YYYY-MM-DD HH:mm:ss').format('DD/MM/YYYY [√†s] HH:mm')} - ${hours_before}h antes (${target})`,
                    type: 'game_reminder_test',
                    status: 'sent',
                    sent_at: new Date().toISOString()
                });

            if (error) {
                console.log(`      ‚ùå Erro ao salvar no banco: ${error.message}`);
            } else {
                console.log(`      ‚úÖ Notifica√ß√£o teste salva no banco`);
            }
            
        } catch (error) {
            console.error(`      ‚ùå Erro ao simular envio para banco:`, error);
        }
    }

    /**
     * 5. Verificar resultado
     */
    async verificarResultado() {
        try {
            console.log('\n‚úÖ 5. VERIFICANDO RESULTADO:');
            
            // Contar notifica√ß√µes de teste
            const { count, error } = await this.supabase
                .from('notifications')
                .select('*', { count: 'exact', head: true })
                .eq('type', 'game_reminder_test');
            
            if (error) {
                console.log('   ‚ùå Erro ao contar notifica√ß√µes de teste:', error.message);
            } else {
                console.log(`   üìä Total de notifica√ß√µes de teste: ${count}`);
            }
            
            // Mostrar √∫ltimas notifica√ß√µes de teste
            const { data: notifications, error: notifError } = await this.supabase
                .from('notifications')
                .select(`
                    id,
                    title,
                    message,
                    sent_at,
                    games!inner(
                        organization_name
                    )
                `)
                .eq('type', 'game_reminder_test')
                .order('sent_at', { ascending: false })
                .limit(3);
            
            if (notifError) {
                console.log('   ‚ùå Erro ao buscar notifica√ß√µes de teste:', notifError.message);
            } else if (notifications && notifications.length > 0) {
                console.log(`   üìã √öltimas notifica√ß√µes de teste:`);
                notifications.forEach((notification, index) => {
                    const sentTime = moment(notification.sent_at).format('DD/MM HH:mm:ss');
                    console.log(`   ${index + 1}. [${sentTime}] ${notification.games.organization_name} - ${notification.title}`);
                });
            } else {
                console.log('   üìù Nenhuma notifica√ß√£o de teste encontrada');
            }
            
        } catch (error) {
            console.error('   ‚ùå Erro ao verificar resultado:', error);
        }
    }
}

// Executar teste
async function main() {
    const teste = new TesteNotificacao();
    await teste.executarTeste();
}

// Executar se este arquivo for chamado diretamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = TesteNotificacao;
