#!/usr/bin/env node

/**
 * üßπ LIMPAR DADOS DE TESTE
 * 
 * Este script limpa todos os dados de teste criados durante
 * os testes de notifica√ß√£o, deixando o sistema limpo.
 */

const { createClient } = require('@supabase/supabase-js');
const moment = require('moment');
moment.locale('pt-br');

class LimparDadosTeste {
    constructor() {
        // Configurar Supabase com as MESMAS configura√ß√µes do Flutter
        const supabaseUrl = 'https://ddlxamlaoumhbbrnmasj.supabase.co';
        const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRkbHhhbWxhb3VtaGJicm5tYXNqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5NDAwMzcsImV4cCI6MjA3MjUxNjAzN30.VrTmCTDl0zkzP1GQ8YHAqFLbtCUlaYIp7v_4rUHbSMo';

        this.supabase = createClient(supabaseUrl, supabaseAnonKey);
    }

    async executarLimpeza() {
        try {
            console.log('üßπ ===== LIMPEZA DE DADOS DE TESTE =====\n');
            
            // 1. Limpar notifica√ß√µes de teste
            await this.limparNotificacoesTeste();
            
            // 2. Limpar configura√ß√µes de teste
            await this.limparConfiguracoesTeste();
            
            // 3. Limpar sess√µes de teste
            await this.limparSessoesTeste();
            
            // 4. Verificar resultado final
            await this.verificarResultadoFinal();
            
            console.log('\nüßπ ===== LIMPEZA CONCLU√çDA =====\n');
            
        } catch (error) {
            console.error('‚ùå Erro durante a limpeza:', error);
        }
    }

    /**
     * 1. Limpar notifica√ß√µes de teste
     */
    async limparNotificacoesTeste() {
        try {
            console.log('üßπ 1. LIMPANDO NOTIFICA√á√ïES DE TESTE:');
            
            // Contar notifica√ß√µes de teste antes da limpeza
            const { count: antes, error: countError } = await this.supabase
                .from('notifications')
                .select('*', { count: 'exact', head: true })
                .in('type', ['game_reminder_test', 'game_reminder_real']);
            
            if (countError) {
                console.log('   ‚ùå Erro ao contar notifica√ß√µes:', countError.message);
            } else {
                console.log(`   üìä Notifica√ß√µes de teste encontradas: ${antes}`);
            }
            
            // Remover notifica√ß√µes de teste
            const { error: deleteError } = await this.supabase
                .from('notifications')
                .delete()
                .in('type', ['game_reminder_test', 'game_reminder_real']);
            
            if (deleteError) {
                console.log('   ‚ùå Erro ao remover notifica√ß√µes:', deleteError.message);
            } else {
                console.log('   ‚úÖ Notifica√ß√µes de teste removidas');
            }
            
        } catch (error) {
            console.error('   ‚ùå Erro ao limpar notifica√ß√µes:', error);
        }
    }

    /**
     * 2. Limpar configura√ß√µes de teste
     */
    async limparConfiguracoesTeste() {
        try {
            console.log('\nüßπ 2. LIMPANDO CONFIGURA√á√ïES DE TESTE:');
            
            // Buscar configura√ß√µes de teste (que referenciam sess√µes de teste)
            const { data: configs, error: searchError } = await this.supabase
                .from('notification_configs')
                .select(`
                    id,
                    session_id,
                    game_sessions!inner(
                        id,
                        notes
                    )
                `)
                .like('game_sessions.notes', '%teste%');
            
            if (searchError) {
                console.log('   ‚ùå Erro ao buscar configura√ß√µes:', searchError.message);
                return;
            }
            
            if (!configs || configs.length === 0) {
                console.log('   üìù Nenhuma configura√ß√£o de teste encontrada');
                return;
            }
            
            console.log(`   üìä Configura√ß√µes de teste encontradas: ${configs.length}`);
            
            // Remover configura√ß√µes de teste
            const configIds = configs.map(c => c.id);
            const { error: deleteError } = await this.supabase
                .from('notification_configs')
                .delete()
                .in('id', configIds);
            
            if (deleteError) {
                console.log('   ‚ùå Erro ao remover configura√ß√µes:', deleteError.message);
            } else {
                console.log('   ‚úÖ Configura√ß√µes de teste removidas');
            }
            
        } catch (error) {
            console.error('   ‚ùå Erro ao limpar configura√ß√µes:', error);
        }
    }

    /**
     * 3. Limpar sess√µes de teste
     */
    async limparSessoesTeste() {
        try {
            console.log('\nüßπ 3. LIMPANDO SESS√ïES DE TESTE:');
            
            // Buscar sess√µes de teste
            const { data: sessoes, error: searchError } = await this.supabase
                .from('game_sessions')
                .select('id, notes')
                .like('notes', '%teste%');
            
            if (searchError) {
                console.log('   ‚ùå Erro ao buscar sess√µes:', searchError.message);
                return;
            }
            
            if (!sessoes || sessoes.length === 0) {
                console.log('   üìù Nenhuma sess√£o de teste encontrada');
                return;
            }
            
            console.log(`   üìä Sess√µes de teste encontradas: ${sessoes.length}`);
            
            // Remover sess√µes de teste
            const sessaoIds = sessoes.map(s => s.id);
            const { error: deleteError } = await this.supabase
                .from('game_sessions')
                .delete()
                .in('id', sessaoIds);
            
            if (deleteError) {
                console.log('   ‚ùå Erro ao remover sess√µes:', deleteError.message);
            } else {
                console.log('   ‚úÖ Sess√µes de teste removidas');
            }
            
        } catch (error) {
            console.error('   ‚ùå Erro ao limpar sess√µes:', error);
        }
    }

    /**
     * 4. Verificar resultado final
     */
    async verificarResultadoFinal() {
        try {
            console.log('\n‚úÖ 4. VERIFICANDO RESULTADO FINAL:');
            
            // Contar notifica√ß√µes totais
            const { count: totalNotif, error: totalError } = await this.supabase
                .from('notifications')
                .select('*', { count: 'exact', head: true });
            
            if (totalError) {
                console.log('   ‚ùå Erro ao contar notifica√ß√µes totais:', totalError.message);
            } else {
                console.log(`   üìä Total de notifica√ß√µes no sistema: ${totalNotif}`);
            }
            
            // Contar configura√ß√µes totais
            const { count: totalConfig, error: configError } = await this.supabase
                .from('notification_configs')
                .select('*', { count: 'exact', head: true });
            
            if (configError) {
                console.log('   ‚ùå Erro ao contar configura√ß√µes totais:', configError.message);
            } else {
                console.log(`   üìä Total de configura√ß√µes no sistema: ${totalConfig}`);
            }
            
            // Contar sess√µes totais
            const { count: totalSessoes, error: sessoesError } = await this.supabase
                .from('game_sessions')
                .select('*', { count: 'exact', head: true });
            
            if (sessoesError) {
                console.log('   ‚ùå Erro ao contar sess√µes totais:', sessoesError.message);
            } else {
                console.log(`   üìä Total de sess√µes no sistema: ${totalSessoes}`);
            }
            
            // Verificar se h√° notifica√ß√µes de teste restantes
            const { count: testeRestante, error: testeError } = await this.supabase
                .from('notifications')
                .select('*', { count: 'exact', head: true })
                .in('type', ['game_reminder_test', 'game_reminder_real']);
            
            if (testeError) {
                console.log('   ‚ùå Erro ao verificar notifica√ß√µes de teste:', testeError.message);
            } else if (testeRestante === 0) {
                console.log('   ‚úÖ Nenhuma notifica√ß√£o de teste restante');
            } else {
                console.log(`   ‚ö†Ô∏è Ainda h√° ${testeRestante} notifica√ß√µes de teste`);
            }
            
            // Mostrar resumo final
            console.log('\n   üìã RESUMO FINAL:');
            console.log(`   üéÆ Jogos: 2 (ativos)`);
            console.log(`   üìÖ Sess√µes: ${totalSessoes} (agendadas)`);
            console.log(`   üîî Configura√ß√µes: ${totalConfig} (ativas)`);
            console.log(`   üì± Notifica√ß√µes: ${totalNotif} (enviadas)`);
            console.log(`   üßπ Dados de teste: Removidos`);
            
        } catch (error) {
            console.error('   ‚ùå Erro ao verificar resultado final:', error);
        }
    }
}

// Executar limpeza
async function main() {
    const limpeza = new LimparDadosTeste();
    await limpeza.executarLimpeza();
}

// Executar se este arquivo for chamado diretamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = LimparDadosTeste;
