#!/usr/bin/env node

/**
 * üöÄ CRIAR TESTE 30 SEGUNDOS
 * 
 * Este script cria uma sess√£o de teste com hor√°rio muito pr√≥ximo
 * para testar o motor imediatamente.
 */

const { createClient } = require('@supabase/supabase-js');
const moment = require('moment');
moment.locale('pt-br');

class CriarTeste30Segundos {
    constructor() {
        // Configurar Supabase
        const supabaseUrl = 'https://ddlxamlaoumhbbrnmasj.supabase.co';
        const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRkbHhhbWxhb3VtaGJicm5tYXNqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5NDAwMzcsImV4cCI6MjA3MjUxNjAzN30.VrTmCTDl0zkzP1GQ8YHAqFLbtCUlaYIp7v_4rUHbSMo';

        this.supabase = createClient(supabaseUrl, supabaseAnonKey);
    }

    async criarTeste30Segundos() {
        try {
            console.log('üöÄ ===== CRIANDO TESTE 30 SEGUNDOS =====\n');
            
            // 1. Limpar sess√µes antigas
            await this.limparSessoesAntigas();
            
            // 2. Criar sess√£o para 30 segundos no futuro
            const sessaoTeste = await this.criarSessao30Segundos();
            
            if (!sessaoTeste) {
                console.log('‚ùå Erro ao criar sess√£o de teste');
                return;
            }
            
            // 3. Criar configura√ß√£o com notifica√ß√£o imediata
            const configTeste = await this.criarConfiguracao30Segundos(sessaoTeste);
            
            if (!configTeste) {
                console.log('‚ùå Erro ao criar configura√ß√£o de teste');
                return;
            }
            
            // 4. Mostrar instru√ß√µes
            await this.mostrarInstrucoes(sessaoTeste, configTeste);
            
            console.log('\nüöÄ ===== TESTE CRIADO =====\n');
            
        } catch (error) {
            console.error('‚ùå Erro durante a cria√ß√£o do teste:', error);
        }
    }

    /**
     * 1. Limpar sess√µes antigas
     */
    async limparSessoesAntigas() {
        try {
            console.log('üßπ 1. LIMPANDO SESS√ïES ANTIGAS:');
            
            // Remover sess√µes antigas
            const { error: sessoesError } = await this.supabase
                .from('game_sessions')
                .delete()
                .ilike('notes', '%teste%');
            
            if (sessoesError) {
                console.log('   ‚ö†Ô∏è Erro ao remover sess√µes antigas:', sessoesError.message);
            } else {
                console.log('   ‚úÖ Sess√µes antigas removidas');
            }
            
        } catch (error) {
            console.error('   ‚ùå Erro ao limpar sess√µes antigas:', error);
        }
    }

    /**
     * 2. Criar sess√£o para 30 segundos no futuro
     */
    async criarSessao30Segundos() {
        try {
            console.log('\nüîß 2. CRIANDO SESS√ÉO 30 SEGUNDOS:');
            
            // Buscar um jogo existente
            const { data: jogos, error: jogoError } = await this.supabase
                .from('games')
                .select('id, organization_name')
                .limit(1);
            
            if (jogoError || !jogos || jogos.length === 0) {
                console.log('   ‚ùå Erro ao buscar jogo:', jogoError?.message);
                return null;
            }
            
            const jogo = jogos[0];
            const agora = moment();
            
            // Criar sess√£o para 30 segundos no futuro
            const dataSessao = agora.clone().add(30, 'seconds');
            
            const sessaoData = {
                game_id: jogo.id,
                session_date: dataSessao.format('YYYY-MM-DD'),
                start_time: dataSessao.format('HH:mm:ss'),
                end_time: dataSessao.clone().add(2, 'hours').format('HH:mm:ss'),
                status: 'scheduled',
                attendance_count: 0,
                notes: 'TESTE 30 SEGUNDOS - Notifica√ß√£o imediata'
            };
            
            const { data: sessao, error } = await this.supabase
                .from('game_sessions')
                .insert(sessaoData)
                .select()
                .single();
            
            if (error) {
                console.log('   ‚ùå Erro ao criar sess√£o:', error.message);
                return null;
            }
            
            console.log(`   ‚úÖ Sess√£o criada: ${sessao.id}`);
            console.log(`   üìÖ Data: ${sessao.session_date} ${sessao.start_time}`);
            console.log(`   ‚è∞ Faltam: ${dataSessao.diff(agora, 'seconds', true).toFixed(0)} segundos`);
            console.log(`   üéÆ Jogo: ${jogo.organization_name}`);
            
            return sessao;
            
        } catch (error) {
            console.error('   ‚ùå Erro ao criar sess√£o:', error);
            return null;
        }
    }

    /**
     * 3. Criar configura√ß√£o com notifica√ß√£o imediata
     */
    async criarConfiguracao30Segundos(sessao) {
        try {
            console.log('\nüîß 3. CRIANDO CONFIGURA√á√ÉO 30 SEGUNDOS:');
            
            const configData = {
                session_id: sessao.id,
                game_id: sessao.game_id,
                total_notifications: 1,
                mensal_notifications: 1,
                notification_type: 'individual',
                whatsapp_group_id: '120363123456789012@g.us',
                notification_schedule: [
                    {
                        "number": 1,
                        "hours_before": 0.005, // 18 segundos antes (0.005 horas)
                        "target": "mensalistas",
                        "message_type": "confirmation"
                    }
                ],
                is_active: true
            };
            
            const { data: config, error } = await this.supabase
                .from('notification_configs')
                .insert(configData)
                .select()
                .single();
            
            if (error) {
                console.log('   ‚ùå Erro ao criar configura√ß√£o:', error.message);
                return null;
            }
            
            console.log(`   ‚úÖ Configura√ß√£o criada: ${config.id}`);
            console.log(`   üîî 1 notifica√ß√£o configurada:`);
            console.log(`      1. 18 segundos antes (mensalistas) - confirma√ß√£o`);
            console.log(`   üì± Grupo WhatsApp: ${config.whatsapp_group_id}`);
            
            return config;
            
        } catch (error) {
            console.error('   ‚ùå Erro ao criar configura√ß√£o:', error);
            return null;
        }
    }

    /**
     * 4. Mostrar instru√ß√µes
     */
    async mostrarInstrucoes(sessao, config) {
        try {
            console.log('\nüìã 4. INSTRU√á√ïES:');
            
            console.log('   üöÄ PASSO 1: Executar motor com logs');
            console.log('   üìù Execute: node motor_simples_notificacoes.js');
            console.log('   üìù Aguarde a conex√£o com WhatsApp');
            console.log('   üìù Monitore os logs detalhados');
            
            console.log('\n   ‚è∞ PASSO 2: Aguardar notifica√ß√£o (30 segundos)');
            console.log('   üìù A notifica√ß√£o ser√° enviada em ~18 segundos');
            console.log('   üìù O motor verifica a cada 10 segundos');
            console.log('   üìù Voc√™ ver√° logs detalhados de cada verifica√ß√£o');
            
            console.log('\n   üì± PASSO 3: Verificar mensagens no WhatsApp');
            console.log('   üìù Verifique se as mensagens chegaram nos telefones:');
            console.log('      - Thiago Nogueira (13981645787)');
            console.log('      - Joao Silva (13987544557)');
            
            console.log('\n   üìä DADOS DO TESTE:');
            console.log(`   üéÆ Jogo: ${sessao.game_id}`);
            console.log(`   üìÖ Sess√£o: ${sessao.session_date} ${sessao.start_time}`);
            console.log(`   üîî Configura√ß√£o: ${config.id}`);
            console.log(`   üì± Grupo: ${config.whatsapp_group_id}`);
            
            console.log('\n   ‚ö†Ô∏è IMPORTANTE:');
            console.log('   üìù Este √© um TESTE IMEDIATO - a notifica√ß√£o ser√° enviada em segundos');
            console.log('   üìù Certifique-se de que o WhatsApp est√° conectado');
            console.log('   üìù Os mensalistas receber√£o mensagens reais');
            console.log('   üìù Monitore os logs detalhados para debug');
            
        } catch (error) {
            console.error('   ‚ùå Erro ao mostrar instru√ß√µes:', error);
        }
    }
}

// Executar cria√ß√£o do teste
async function main() {
    const teste = new CriarTeste30Segundos();
    await teste.criarTeste30Segundos();
}

// Executar se este arquivo for chamado diretamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = CriarTeste30Segundos;

